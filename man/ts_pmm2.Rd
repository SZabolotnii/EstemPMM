% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pmm_ts.R
\name{ts_pmm2}
\alias{ts_pmm2}
\title{Fit a time series model using the Polynomial Maximization Method (order 2)}
\usage{
ts_pmm2(
  x,
  order,
  model_type = c("ar", "ma", "arma", "arima"),
  method = "pmm2",
  max_iter = 50,
  tol = 1e-06,
  include.mean = TRUE,
  initial = NULL,
  na.action = na.fail,
  regularize = TRUE,
  reg_lambda = 1e-08,
  verbose = FALSE
)
}
\arguments{
\item{x}{numeric vector of time series data}

\item{order}{specification of the model order:
- For AR models: a single integer (the AR order)
- For MA models: a single integer (the MA order)
- For ARMA models: a vector c(p, q) (AR and MA orders)
- For ARIMA models: a vector c(p, d, q) (AR, differencing, and MA orders)}

\item{model_type}{string specifying the model type: "ar", "ma", "arma", or "arima"}

\item{method}{string: estimation method, one of "pmm2" (default), "css", "ml", "yw", "ols"}

\item{max_iter}{integer: maximum number of iterations for the algorithm}

\item{tol}{numeric: tolerance for convergence}

\item{include.mean}{logical: whether to include a mean (intercept) term}

\item{initial}{list or vector of initial parameter estimates (optional)}

\item{na.action}{function to handle missing values, default is na.fail}

\item{regularize}{logical, add small value to diagonal for numerical stability}

\item{reg_lambda}{regularization parameter (if regularize=TRUE)}

\item{verbose}{logical: whether to print progress information}
}
\value{
An S4 \code{TS2fit} object
}
\description{
This function fits an AR, MA, ARMA, or ARIMA model to a time series using the
Polynomial Maximization Method (PMM) of order 2, which is robust against
non-Gaussian errors.
}
\details{
The PMM2 algorithm works as follows:
\enumerate{
\item Fits an initial model using a standard method (OLS, Yule-Walker, CSS, or ML)
\item Computes central moments (m2, m3, m4) from initial residuals/innovations
\item Iteratively improves parameter estimates using PMM approach
}

PMM2 is particularly useful when error terms are non-Gaussian and asymmetric.
}
\examples{
\dontrun{
# AR model example
n <- 200
ar_coef <- c(0.7, -0.3)
x <- arima.sim(model = list(ar = ar_coef), n = n,
               rand.gen = function(n) rt(n, df=3))
fit_ar <- ts_pmm2(x, order = 2, model_type = "ar")

# ARIMA model example
y <- arima.sim(model = list(ar = 0.7, ma = 0.4), n = n,
               rand.gen = function(n) rgamma(n, shape=2, scale=1) - 2)
z <- cumsum(y)  # Create non-stationary series
fit_arima <- ts_pmm2(z, order = c(1, 1, 1), model_type = "arima")
}
}
